ggplot(., aes(x = year, y = model, fill = faltante)) +
geom_tile(colour = "white") +
labs(x = "Ano de Fabricação",
y = "Modelo do Carro",
fill = "Dado faltante?") +
scale_fill_viridis_d()
vw %>%
select(year, model) %>%
group_by(year, model) %>%
count() %>%
ungroup() %>%
complete(year, model, fill = list(n = 0)) %>%
mutate(faltante = ifelse(n == 0, "Sim", "Não")) %>% select(faltante) %>% table()
nrow(vw)
nrow(vw)/nrow(vw_bk)
1-nrow(vw)/nrow(vw_bk)
round(1-nrow(vw)/nrow(vw_bk), digits = 2)
round(1-nrow(vw)/nrow(vw_bk), digits = 2)*100
round(1-nrow(vw)/nrow(vw_bk)*100, digits = 2)
round(nrow(vw_bk)/nrow(vw)*100, digits = 2)
round((1-nrow(vw)/nrow(vw_bk))*100, digits = 2)
onehot(vw)
onehot(vw, max_levels = 30)
onehot(iris)
onehot(select(vw, -model))
vw
?onehot
onehot
onehot(vw)
x <- vw
nlevels <- sapply(data, function(x) length(levels(x)))
f <- nlevels <= max_levels
if (any(!f)) {
n <- names(which(!f))
warning(sprintf("Variables excluded for having levels > max_levels: %s",
n), call. = F)
}
max_levels = 30
f <- nlevels <= max_levels
if (any(!f)) {
n <- names(which(!f))
warning(sprintf("Variables excluded for having levels > max_levels: %s",
n), call. = F)
}
n <- names(data)[f]
info <- Map(column_info, data[f], n)
res <- structure(info, class = "onehot")
library(mltools)
install.packages(mltools)
install.packages("mltools")
install.packages(mltools)
library(mltools)
one_hot(vw)
one_hot(as.data.table(vw))
library(data.table)
one_hot(as.data.table(vw))
library(tidymodels)
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy() %>%
# center/scale
step_center(-price) %>%
step_scale(-price) %>%
# funcao para aplicar a transformacao aos dados
prep()
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino)
# pacote necessario
library(tidymodels)
# 75% dos dados como treino
set.seed(2410)
vw_split <- initial_split(vw, prop = .75)
# criar os conjuntos de dados de treino e teste
vw_treino <- training(vw_split)
vw_teste  <- testing(vw_split)
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy() %>%
# center/scale
step_center(-price) %>%
step_scale(-price) %>%
# funcao para aplicar a transformacao aos dados
prep()
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino)
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy()
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy(is.character)
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy(is.character) %>%
# center/scale
step_center(-price) %>%
step_scale(-price) %>%
# funcao para aplicar a transformacao aos dados
prep()
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy(where(is.character)) %>%
# center/scale
step_center(-price) %>%
step_scale(-price) %>%
# funcao para aplicar a transformacao aos dados
prep()
vw_rec <-
# regressao que serah aplicada aos dados
recipe(price ~ .,
data = vw_treino) %>%
# criacao das variaveis dummy
step_dummy(where(is.character)) %>%
# center/scale
step_center(where(is.numeric), -price) %>%
step_scale(where(is.numeric), -price) %>%
# funcao para aplicar a transformacao aos dados
prep()
vw_treino_t <- juice(vw_rec)
# preparar o conjunto de teste
vw_teste_t <- bake(vw_rec,
new_data = vw_teste)
# modelo
vw_lm <-
linear_reg() %>%
set_engine("lm")
vw_lm
# criar workflow
vw_wflow <-
workflow() %>%
add_recipe(vw_rec) %>%
add_model(vw_lm)
# divisao dos dados
vw_treino_cv <- vfold_cv(vw_treino, v = 5)
vw_treino_cv
# modelo ajustado com validacao cruzada
vw_lm_fit_cv <- fit_resamples(vw_wflow, vw_treino_cv)
vw_lm_fit_cv
# resultados
collect_metrics(vw_lm_fit_cv)
# resultados no conjunto de teste
resultado <-
vw_teste %>%
bind_cols(predict(vw_lm_fit_treino, vw_teste) %>%
rename(predicao_lm = .pred))
# resultado final
metrics(resultado,
truth = dist,
estimate = predicao_lm)
# grafico final
ggplot(resultado, aes(x = dist, y = predicao_lm)) +
geom_point() +
labs(x = "Valores Observados", y = "Valores Preditos") +
geom_abline(intercept = 0, slope = 1) +
coord_fixed()
# ajuste do modelo no conjunto de treino completo
vw_lm_fit_treino <- fit(vw_wflow, vw_treino)
# resultados no conjunto de teste
resultado <-
vw_teste %>%
bind_cols(predict(vw_lm_fit_treino, vw_teste) %>%
rename(predicao_lm = .pred))
# resultado final
metrics(resultado,
truth = dist,
estimate = predicao_lm)
# grafico final
ggplot(resultado, aes(x = dist, y = predicao_lm)) +
geom_point() +
labs(x = "Valores Observados", y = "Valores Preditos") +
geom_abline(intercept = 0, slope = 1) +
coord_fixed()
vw_lm_fit_treino <- fit(vw_wflow, vw_treino)
resultado <-
vw_teste %>%
bind_cols(predict(vw_lm_fit_treino, vw_teste) %>%
rename(predicao_lm = .pred))
metrics(resultado,
truth = price,
estimate = predicao_lm)
ggplot(resultado, aes(x = price, y = predicao_lm)) +
geom_point() +
labs(x = "Valores Observados", y = "Valores Preditos") +
geom_abline(intercept = 0, slope = 1) +
coord_fixed()
# definicao do tuning
vw_rf_tune <-
rand_forest(
mtry = tune(),
trees = 1000,
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
vw_rf_grid <- grid_regular(mtry(range(1, 9)),
min_n(range(10, 50)),
levels = c(9, 5))
vw_rf_grid
vw_rf_tune_wflow <-
workflow() %>%
add_model(vw_rf_tune) %>%
add_formula(price ~ .)
# definicao do tuning
vw_rf_tune <-
rand_forest(
mtry = tune(),
trees = 1000,
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
# grid de procura
vw_rf_grid <- grid_regular(mtry(range(1, 9)),
min_n(range(10, 50)),
levels = c(9, 5))
# workflow
vw_rf_tune_wflow <-
workflow() %>%
add_model(vw_rf_tune) %>%
add_formula(price ~ .)
# definicao da validacao cruzada
set.seed(2410)
vw_treino_cv <- vfold_cv(vw_treino_t, v = 10)
# avaliacao do modelo
vw_rf_fit_tune <-
vw_rf_tune_wflow %>%
tune_grid(
resamples = vw_treino_cv,
grid = vw_rf_grid
)
# resultados
collect_metrics(vw_rf_fit_tune)
rmarkdown::pandoc_available
?rmarkdown::pandoc_available
knitr::purl("vw.Rmd")
vw_rf_grid <- grid_regular(mtry(range(1, 8)),
min_n(range(10, 50)),
levels = c(9, 5))
vw_rf_grid
vw_rf_grid <- grid_regular(mtry(range(1, 8)),
min_n(range(10, 50)))
vw_rf_grid
# definicao do tuning
vw_rf_tune <-
rand_forest(
mtry = tune(),
trees = 1000,
min_n = tune()
) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
# grid de procura
vw_rf_grid <- grid_regular(mtry(range(1, 8)),
min_n(range(10, 50)))
vw_rf_grid
# workflow
vw_rf_tune_wflow <-
workflow() %>%
add_model(vw_rf_tune) %>%
add_formula(price ~ .)
# definicao da validacao cruzada
set.seed(2410)
vw_treino_cv <- vfold_cv(vw_treino_t, v = 10)
# avaliacao do modelo
vw_rf_fit_tune <-
vw_rf_tune_wflow %>%
tune_grid(
resamples = vw_treino_cv,
grid = vw_rf_grid
)
# resultados
collect_metrics(vw_rf_fit_tune)
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric, scales = "free") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric, scales = "free_y") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
?facet_grid
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(.metric ~, scales = "free_y") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(.metric ~, scales = "free_y") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(.metric ~ , scales = "free_y") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
#facet_grid(.metric ~ , scales = "free_y") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric, scales = "free_y") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric, scales = "free") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric, scales = "free", ncol = 1) +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
facet_grid
?facet_grid
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric, scales = "free", space = "free") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n))
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(.metric ~ ., scales = "free", space = "free") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
vw_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(.metric ~ ., scales = "free") +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d()
dim(vw_rf_fit_tune)
vw_rf_fit_tune
vw_rf_fit_tune %>%
collect_metrics()
vw_rf_fit_tune %>%
collect_metrics() %>% dim()[1]
vw_rf_fit_tune %>%
collect_metrics() %>% dim()
vw_rf_fit_tune %>%
collect_metrics() %>% dim().[1]
vw_rf_fit_tune %>%
collect_metrics() %>% dim()[.1]
vw_rf_fit_tune %>%
collect_metrics() %>% nrow()
vw_rf_fit_tune %>%
collect_metrics() %>% nrow()/2
# melhores modelos
vw_rf_fit_tune %>%
show_best("rmse")
# melhor modelo
vw_rf_best <-
vw_rf_fit_tune %>%
select_best("rmse")
vw_rf_final <-
vw_rf_tune_wflow %>%
finalize_workflow(vw_rf_best)
vw_rf_final <- fit(vw_rf_final,
vw_treino_t)
vw_rf_final
# resultados no conjunto de teste
resultado_rf <-
vw_teste_t %>%
bind_cols(predict(vw_rf_final, vw_teste_t) %>%
rename(predicao_rf = .pred))
metrics(resultado_rf,
truth = price,
estimate = predicao_rf,
options = "rmse")
conf_mat(resultado_rf,
truth = price,
estimate = predicao_rf) %>%
autoplot(type = "heatmap")
# sensitividade
sens(resultado_rf,
truth = price,
estimate = predicao_rf)
# especificidade
spec(resultado_rf,
truth = price,
estimate = predicao_rf)
# importancia das variaveis
vw_rf_final %>%
pull_workflow_fit() %>%
vip(scale = TRUE)
resultado_rf <-
vw_teste_t %>%
bind_cols(predict(vw_rf_final, vw_teste_t) %>%
rename(predicao_rf = .pred))
metrics(resultado_rf,
truth = price,
estimate = predicao_rf,
options = "rmse")
metrics(resultado_rf,
truth = price,
estimate = predicao_rf,
options = "rmse")
metrics(resultado_rf,
truth = price,
estimate = predicao_rf)
metrics(resultado,
truth = price,
estimate = predicao_lm)
metrics(resultado_rf,
truth = price,
estimate = predicao_rf) %>% filter(.metric == "rmse")
metrics(resultado_rf,
truth = price,
estimate = predicao_rf) %>% filter(.metric == "rmse")[,3 ]
metrics(resultado_rf,
truth = price,
estimate = predicao_rf) %>% .[1,3]
metrics(resultado, truth = price, estimate = predicao_lm) %>% .[1,3]
ggplot(resultado_rf, aes(x = price, y = predicao_rf)) +
geom_point() +
labs(x = "Valores Observados", y = "Valores Preditos") +
geom_abline(intercept = 0, slope = 1) +
coord_fixed()
library(vip)
vw_rf_final %>%
pull_workflow_fit() %>%
vip(scale = TRUE)
library(vip)
vw_rf_final %>%
extract_fit_parsnip() %>%
vip(scale = TRUE)
